/***********************************************************((nodes L)) lists the nodes, numbered from M to N, M < N of the graph
***********************************************************/
((nodes ( 1 2 3 4 5 6 7 8 9 10 ) ))


/*********************************************************** ((connect_aux X Y M N)) when X < Y are random integers between 
M<= N; it makes use to the user defined predicate randint
***********************************************************/
((connect_aux X Y  M N )
	(randint M N X)
	(sum X 1 X1)
	(randint X1 N Y))


/*********************************************************** ((randint M1 M2 M)) holds when M is a random integere between M1 and M2; M1 <= M2
It makes use of the bip ((random  X)) which generates a random vaue X in [0, 1]
It uses the formula M = M1 + (M2 - M1)* X
It makes use of the bip division which implements integer division; 
For example, ?((division 4.123 1 M)) returns M equal to 4
************************************************************/
((randint M1 M2 M)
	(random X)
	(sum M1 Y M2)(times X  Y Z)(sum M1 Z M3)
	(division M3 1 M))


/*********************************************************** ((connect_aux2 N L)) generates a list of  N pairs (X Y) 
 where X and Y are random integers in the range 1 - 10 
It invokes connect_aux defined above
***********************************************************/

((connect_aux2 0 ()))

((connect_aux2 1 ((X Y)) )
	(connect_aux X Y 1 10))

((connect_aux2 N ((X Y)|L1) )
	(sum N -1 N1)
	(connect_aux2 N1 L1)
	(connect_aux X Y 1 10)
	(negg member (X Y) L1))


((connect a b))
((connect a d))
((connect a f))

((connect b c))
((connect b f))

((connect d e))
((connect f e))

((connect c e))
/*********************************************************** ((connect_aux3 N L)) invokes ((connect_aux2 N L)) and defines the predicate ((edges L)) which is added to the knowledge base. 
Invoke connect_aux3 several times, each time with small values of N
For example, if the query ?((connect_aux3 3 L)) is executed 4 times, four clauses for the predicate newedges will be added to the knowledge base.
**********************************************************/

((connect_aux3 N L)
	(connect_aux2 N L)
      (addcl ((newedges L )) ))


/*********************************************************** alledges_aux collects all the edges from all the clauses for newedges and eliminates duplicates; 
It uses set_union defined below in list processing predicates it adds the clause ((alledges EDGES)) where EDGES is the list of 
unique edges collected from  newedges. 
***********************************************************/
((alledges_aux)
	(findall L ((newedges L)) L)(decide L))

((decide ()))
((decide (H))
	(addcl ((alledges H)) ))
((decide (H1 H2|T))
	(set_union H1 H2 H)
	(decide (H|T)))


/*********************************************************** ((make PRED L)) will assert in the knowledge base the predicate PRED with the argument being an element of the list L, for ALL the elements of the list L.
For example, ?((make connect ((1 2) (4 9)) )) will add to the knowledge base the clauses ((connect 1 2)) and ((connect 4 9))
***********************************************************/

((make connect ()))
((make connect ((X Y)|T))
	(addcl ((connect X Y )) )
	(make connect T))

((path X Y)(connect X Y))
((path X Y)(connect Y X))

/************************************************************
+ ((outdeg_aux X N)) computes N as the number of nodes Y for 
+ which ((connect X Y)) holds;
+
+ It makes use of the built in predicates findall and length.
**************************************************************/
((outdeg_aux X N)
	(findall (X Y) ((connect X Y)) L)(length L N))

((outdeg_aux2 () ))
((outdeg_aux2 (H|T))
      (outdeg_aux H N)
      (addcl ((outdeg H N)) )
      (outdeg_aux2 T))


/****************************************************************
* ((indeg_aux X N)) computes N as the number of nodes Y for which * ((connect Y X)) holds;
*
* It makes use of the built in predicates findall and length
****************************************************************/

((indeg_aux X N)
	(findall (X Y) ((connect Y X)) L)(length L N))

((indeg_aux2 () ))
((indeg_aux2 (H|T))
   (indeg_aux H N)
   (addcl ((indeg H N)) )
   (indeg_aux2 T))


/****************************************************************((deg_aux X N)) computes N as the number of nodes Y for which ((path X Y)) holds;
 path is the symmetric version of connect
 It makes use of the built in predicates findall and length
***************************************************************/((deg_aux X N)
	(findall (X Y) ((path X Y)) L)(length L N))

((deg_aux2 () ))
((deg_aux2 (H|T))(deg_aux H N)(addcl ((deg H N)) )(deg_aux2 T))


/****************************************************************
GENERAL LIST PROCESSING PREDICATES USED IN THE PROGRAM
***************************************************************/
((member X (X|_)))
((member X (_|T))(member X T))

/***************************************************************
mem is likemember but removes an element once it finds it in the list
***************************************************************/
((mem _ () ()))
((mem H (H|T) T)(!))
((mem X (H|T) (H|T1))(mem X T T1))

((length () 0))
((length (H|T) N)(length T LN)(sum LN 1 N))

((append () L L))
((append (H1|T1) L2 (H1|T))(append T1 L2 T)) 

((set_union L1 L2 L)(append L1 L2 LL)(rem_dup LL L))

((rem_dup () ()))
((rem_dup (H|T) (H|TT))(!)(mem H T T1)(rem_dup T1 TT))

/***************************************************************
end gengraph code
***************************************************************/
/* The  stopping rule for this condition is obtained when 
the current path to be expanded starts with the goal node, that is:
*/

((depthF ((X |T) |  PATHS) (X|T))
               (goal X))




((depthF (PAth | TPaths) SOL)
           (expand PAth  NPaths)
           (append NPaths TPaths NEWPATHS)
           (depthF NEWPATHS SOL))
 

((reverse () ()))
((reverse (H|T) R)(reverse T RT)(append RT (H) R))

((append () L L))
((append (H|T) L2 (H|L))(append T L2 L))


((pretty_print_solution () ))
((pretty_print_solution (H|T))(pp)(p H "->")(pretty_print_solution T))

/*
The predicate expand is similar to solve_all_wfa from which we will 
remove the predicates operating on the knowledge base and replace go by 
path.  That is, from the predicate
*/

((solve_all_wfa S G SOLUTIONS)
                             (kill goal)
                             (addcl ((goal G)) )
                             (findall P ((go S P (S)))  SOLUTIONS)
                             (delcl ((goal G)) ))

%we will obtain:

((expand (HPath|TPath) NPaths)
          (findall  (NEXT HPath|TPath)
                       ((path HPath NEXT)(negg member NEXT (HPath|TPath)))
                         NPaths
               )
)

%We next wrap this in a top level predicate  solve_BF as follows:

((solve_DF S  G SOL)
                 (kill goal)
                 (addcl ((goal G)))
                 (depthF ((S)) S1)
                 (reverse S1 SOL)
                 (pretty_print_solution SOL)
                 (delcl  ((goal G))  ))
				 
/* The  stopping rule for this condition is obtained when 
the current path to be expanded starts with the goal node, that is:
*/

((breadthF ((X |T) |  PATHS) (X|T))
               (goal X))




((breadthF (PAth | TPaths) SOL)
           (expand PAth  NPaths)
           (append TPaths NPaths NEWPATHS)
           (breadthF NEWPATHS SOL))
 

%We next wrap this in a top level predicate  solve_BF as follows:

((solve_BF S  G SOL)
                 (kill goal)
                 (addcl ((goal G)))
                 (breadthF ((S)) S1)
                 (reverse S1 SOL)
                 (pretty_print_solution SOL)
                 (delcl  ((goal G))  ))

/***************************************************************
end breadth and depth search code
***************************************************************/

%((algosearch T S G)) /*To perform a search it needs an int a starting node and a goal node*/

/*does a depth first search if T < 0*/
((algosearch T S G)
	(less T 0 )
	(solve_DF S G SOL)
	(p)
	(pp "depth")
	)
/*does a breadth first search if T > 5*/
((algosearch T S G)
	(negg less_eq T 5 )
	(solve_BF S G SOL)%print sol somehow
	(p)
	(pp "breadth")
	)
	
((algosearch T S G)
	(less_eq T 5 )
	(negg less T 0 )
	(solve_HS T S G SOL)
	(p)
	(pp "hybrid")
	)
	
((hybrid TH ((X |T) | PATHS) (X|T))
	(goal X))
	
	
((hybrid T (PAth | TPath) SOL)
	(extract PAth NODE)
	(outdeg_aux2 (NODe))
	(outdeg NODE OD)
	(less OD T)
	(!)
	%code to do the do depth first search
	(expand PAth  NPath)
	(append NPath TPath NEWPATHS)
	(hybrid T NEWPATHS SOL)
	)

((hybrid T (PAth | TPaths) SOL)
	(extract PAth NODE)
	(outdeg_aux2 (NODE))
	(outdeg NODE OD)
	(negg less OD T)
	%code to do the do breadth first search
	(expand PAth  NPaths)
    (append TPaths NPaths NEWPATHS)
    (hybrid T NEWPATHS SOL) 
	)
	
((solve_HS T S G SOL)
	(kill goal)
	(addcl ((goal G)))
	(hybrid T ((S)) S1)
	(reverse S1 SOL)
	(pretty_print_solution SOL)
	(delcl  ((goal G))  )
	)
	
((extract PAth NODE)
	(reverse PAth S)
	(head PAth NODE)
)

((head (H|T) H)
)
/* Sample run
Fril >reload ChoiLambrightMillerAss2.frl

yes
Fril >?((algosearch 1 a e))

a ->
d ->
e -> hybrid

yes
Fril >?((algosearch 4 a e))

a ->
b ->
c ->
e -> hybrid

yes
Fril >
	*/